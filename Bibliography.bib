@online{googleioref,
    Title = {Google {I}/{O}},
    url = {https://events.google.com/io/}}
    
@online{androiddevblogref,
    Title = {Android {D}evelopers {B}log},
    url = {https://android-developers.googleblog.com/}}
    
@online{androidauthorityref,
    Title = {Android {A}uthority},
    url = {https://www.androidauthority.com}}
    
@online{androidauthorityinitialdescriptionref,
    Title = {History of {A}ndroid},
    url = {https://www.androidauthority.com/history-android-os-name-789433/},
    author = {John Callaham},
    month = {August},
    year = {2019}}
    
@online{symbianfailureref,
    Title = {Tales in {T}ech {H}istory: {S}ymbian},
    url = {https://www.silicon.co.uk/mobility/smartphones/symbian-mobile-history-227097},
    author = {Tom Jowitt},
    month = {January},
    year = {2018}}
    
@online{androidmarketshare1ref,
    Title = {Mobile {O}perating {S}ystem {M}arket {S}hare {W}orldwide},
    url = {https://gs.statcounter.com/os-market-share/mobile/worldwide},
    month = {August},
    year = {2019}}

@online{androidmarketshare2ref,
    Title = {Smartphone {M}arket {S}hare},
    url = {https://www.idc.com/promo/smartphone-market-share/os},
    month = {June},
    year = {2019}}
    
@online{amazonappstoreappcount,
    Title = {Amazon {A}pp {S}tore {N}umber of {A}pps by {Q}2 2019},
    url = {https://www.statista.com/statistics/307330/number-of-available-apps-in-the-amazon-appstore/},
    author = {J. Clement},
    month = {August},
    year = {2019}}
    
@online{playstoreappcount,
    Title = {Google {P}lay {S}tore {N}umber of {A}pps up to {J}une 2019},
    url = {https://www.statista.com/statistics/266210/number-of-available-applications-in-the-google-play-store/},
    author = {J. Clement},
    month = {July},
    year = {2019}}
    
@online{softwareengineeringdefinitionref,
    Title = {What is {S}oftware {E}ngineering?},
    url = {https://whatis.techtarget.com/definition/software-engineering},
    author = {Margaret Rouse, Matthew Haughn},
    month = {November},
    year = {2016}}
    
@inbook{softwareengineeringdefinitionref2,
    Title = {Software Engineering 9th Edition},
    chapter = {1},
    pages = {6},
    author = {Ian Sommerville},
    publisher = {Pearson},
    year = {2011}}
    
@book{softwareengineeringbook,
    Title = {Software Engineering 9th Edition},
    author = {Ian Sommerville},
    publisher = {Pearson},
    year = {2011}}
    
@inbook{softwareengineeringgoodsoftwareattributes,
    Title = {Software Engineering 9th Edition},
    chapter = {1},
    pages = {8},
    author = {Ian Sommerville},
    publisher = {Pearson},
    year = {2011}}
    
@online{googlekotlinfirstref,
    Title = {Kotlin is now {G}oogleâ€™s preferred language for {A}ndroid app development},
    url = {https://techcrunch.com/2019/05/07/kotlin-is-now-googles-preferred-language-for-android-app-development/},
    author = {Frederic Lardinois},
    month = {May},
    year = {2019}}
    
@online{androidjetpackref,
    Title = {Android {J}etpack},
    url = {https://developer.android.com/jetpack}}
    
@online{kotlinextensions,
    Title = {Kotlin {E}xtensions},
    url = {https://kotlinlang.org/docs/reference/extensions.html}}
    
@online{kotlinnullsafety,
    Title = {Kotlin {N}ull {S}afety},
    url = {https://kotlinlang.org/docs/reference/null-safety.html}}
    
@online{kotlindataclasses,
    Title = {Kotlin {D}ata {C}lasses},
    url = {https://kotlinlang.org/docs/reference/data-classes.html}}
    
@online{kotlinbasictypes,
    Title = {Kotlin {B}asic {T}ypes},
    url = {https://kotlinlang.org/docs/reference/basic-types.html}}
    
@online{kotlincompanionobjects,
    Title = {Kotlin {C}ompanion {O}bjects},
    url = {https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects}}
    
@online{Kotlinref,
    Title = {Kotlinlang.org},
    url = {https://kotlinlang.org/}}
    
@online{eventbritemissionstatement,
    Title = {Eventbrite - {A}bout {U}s},
    url = {https://www.eventbrite.com/about/}}
    
@online{eventbriteorganiseriosapp,
    Title = {Eventbrite {O}rganiser i{OS}},
    url = {https://apps.apple.com/us/app/eventbrite-organizer/id368260521}}
    
@online{eventbriteorganiserandroidapp,
    Title = {Eventbrite {O}rganiser {A}ndroid},
    url = {https://play.google.com/store/apps/details?id=com.eventbrite.organizer&hl=en_IE}}
    
@online{eventattendeesskewexample,
    Title = {Pope {F}rancis {P}apal {M}ass {H}eadcount},
    url = {https://www.irishtimes.com/news/ireland/irish-news/opw-reveals-final-headcount-for-papal-mass-in-phoenix-park-1.3634424},
    author = {Ken Foxe}}
    
@online{socialtablesaboutus,
    Title = {Social{T}ables - {A}bout {U}s},
    url = {https://www.socialtables.com/about/}}
    
@online{eventbritelogo,
    Title = {Eventbrite {P}ress {R}esources},
    url = {https://www.eventbrite.ie/press/}}
    
@online{socialtableslogoresource,
    Title = {Social{T}ables {L}ogo {R}esource},
    url = {https://www.businesswire.com/news/home/20181016005991/en/Cvent-Acquires-Social-Tables-Power-Tighter-Collaboration}}
    
@online{androidlogowithversionsresource,
    Title = {Android {L}ogo with {V}ersions},
    url = {https://9to5google.com/guides/android/}}
    
@online{kotlinlogoresource,
    Title = {Kotlin {FAQ} with {L}ogo {R}esources},
    url = {https://kotlinlang.org/docs/reference/faq.html}}
    
@online{eventzillaaboutus, 
    Title = {Eventzilla - {A}bout},
    url = {https://www.eventzilla.net/us/about}}
    
@online{eventzillalogosource,
    Title = {Fit{S}mall{B}usiness - {E}ventzilla},
    url = {https://fitsmallbusiness.com/eventzilla-user-reviews-and-pricing/}}
    
@online{eventzillaiosapp,
    Title = {Eventzilla i{OS} {A}pp},
    url = {https://apps.apple.com/us/app/eventzilla/id1437123810}}
    
@online{eventzillaandroidapp,
    Title = {Eventzilla {A}ndroid {A}pp},
    url = {https://play.google.com/store/apps/details?id=com.eventzilla.attendee.app&hl=en_US}}
    
@online{heuristics,
    Title = {Nielsen's {H}euristics},
    url = {https://www.nngroup.com/articles/ten-usability-heuristics/}}
    
@inproceedings{evolutionofandroidreview,
    author = {Muhammad Haris, Basit Jadoon, Farhan Hassan Khan},
    title= {Evolution of {A}ndroid {O}perating {S}ystem: {A} {R}eview},
    year = {2017},
    month = {November},
    booktitle = {International Conference on Advanced Research},
    volume = {2},
    location = {Melbourne, Australia},
    abstract = {In  past  mobile  phones  were  used  only  to  make calls but with the introduction of smartphone the mobile phone has  evolved  to  a  low  powered  hand  held  processing  system. This  evolution  was  caused  by  the  operating  system  for  the mobile  phones  making  them  smart that  have  processing  and storage  of  their  own.  Now  the  mobile  provides  numerous functionalities  from  calling  to  texting,  multimedia  sharing, emails,  socializing  applications,  word  processor,  excel  sheets to  various  multiplayer  games  and  much  more.    The  operating system  for  these  hand  held  devices  are iOS  by  Apple  Inc., Windows  by Windows  Inc.  and  Android  by  Google.  Among the   competitors   in   smartphone   operating   system   industry Android  holds  the  largest  market  share  in  terms  of  units shipped  worldwide  and  number  of  users.  Android  is  an  open source  operating  system  based  on  linux  kernel  on  which applications run on an application framework that controls the activities   supported   by   the   libraries   and   Dalvik   virtual machine which compiles and converts all java class files into a single  file.  There  can  be  number  of  virtual  machines  running simultaneously    on    a    single    device    handling    different applications or instances of an application.  Android operating system  provides  memory  management,  process  management to  the  applications  and  services  running.  Each  release  of android   improved   user   experience   and   brought   enhanced features.  This  paper  presents  a study of  evolution  that  each release brought to the android operating system.}}
    
@inproceedings{evolutionofandroidgooglebuyoutref,
    author = {Muhammad Haris, Basit Jadoon, Farhan Hassan Khan},
    title= {Evolution of {A}ndroid {O}perating {S}ystem: {A} {R}eview},
    year = {2017},
    month = {November},
    booktitle = {International Conference on Advanced Research},
    volume = {2},
    location = {Melbourne, Australia},
    pages = {1}}
    
@inproceedings{evolutionofandroidmarketshareref,
    author = {Muhammad Haris, Basit Jadoon, Farhan Hassan Khan},
    title= {Evolution of {A}ndroid {O}perating {S}ystem: {A} {R}eview},
    year = {2017},
    month = {November},
    booktitle = {International Conference on Advanced Research},
    volume = {2},
    location = {Melbourne, Australia},
    pages = {1}}
    
@inproceedings{evolutionofandroidoschangesref,
    author = {Muhammad Haris, Basit Jadoon, Farhan Hassan Khan},
    title= {Evolution of {A}ndroid {O}perating {S}ystem: {A} {R}eview},
    year = {2017},
    month = {November},
    booktitle = {International Conference on Advanced Research},
    volume = {2},
    location = {Melbourne, Australia},
    pages = {4 - 5}}
    
@online{androidoreochanges,
    Title = {Android - 8.0 {o}reo},
    url = {https://www.android.com/versions/oreo-8-0/}}
    
@online{androidnougatchanges,
    Title = {Android - {N}ougat},
    url = {https://www.android.com/versions/nougat-7-0}}
    
@online{androidpiechanges,
    Title = {Android 9 {P}ie},
    url = {https://www.android.com/versions/pie-9-0/}}
    
@online{android10ref,
    Title = {Android 10},
    url = {https://www.android.com/android-10/}}
    
@inproceedings{androidkotlinstudy,
    Title = {Characterizing the {T}ransition to {K}otlin of {A}ndroid {A}pps: {A} {S}tudy on {F}-{D}roid, {P}lay {S}tore, and {G}it{H}ub},
    author = {Riccardo Coppolla, Luca Ardito, Marco Torchiano},
    booktitle = {Proceedings of the 3rd ACM SIGSOFT International Workshop on App Market Analytics},
    abstract = {
    Context: Kotlin is a novel language that represents an alternative to Java, and has been recently adopted as a first-class programming language for Android applications. Kotlin is achieving a significant diffusion among developers, and several studies have highlighted various advantages of the language when compared to Java.
    Goal: The objective of this paper is to analyze a set of open-source Android apps, to evaluate their transition to the Kotlin programming language throughout their lifespan and understand whether the adoption of Kotlin has impacts on the success of Android apps.
    Methods: We mined all the projects from the F-Droid repository of Android open-source applications, and we found the corresponding projects on the official Google Play Store and on the GitHub platform. We defined a set of eight metrics to quantify the relevance of Kotlin code in the latest update and through all releases of an application. Then, we statistically analyzed the correlation between the presence of Kotlin code in a project and popularity metrics mined from the platforms where the apps were released.
    Results: Of a set of 1232 projects that were updated after October 2017, near 20\% adopted Kotlin and about 12\% had more Kotlin code than Java; most of the projects that adopted Kotlin quickly transitioned from Java to the new language. The projects featuring Kotlin had on average higher popularity metrics; a statistically significant correlation has been found between the presence of Kotlin and the number of stars on the GitHub repository.
    Conclusion: The Kotlin language seems able to guarantee a seamless migration from Java for Android developers. With an inspection on a large set of open-source Android apps, we observed that the adoption of the Kotlin language is rapid (when compared to the average lifespan of an Android project) and seems to come at no cost in terms of popularity among the users and other developers.},
    month = {August},
    year = {2019},
    isbn = {978-1-4503-6858-2}}
    
@inproceedings{androidkotlinuptake,
    Title = {Characterizing the {T}ransition to {K}otlin of {A}ndroid {A}pps: {A} {S}tudy on {F}-{D}roid, {P}lay {S}tore, and {G}it{H}ub},
    author = {Riccardo Coppolla, Luca Ardito, Marco Torchiano},
    booktitle = {Proceedings of the 3rd ACM SIGSOFT International Workshop on App Market Analytics},
    pages = {7},
    month = {August},
    year = {2019}}
    
@article{reviewonandroidkotlin,
    Title = {Review {S}tudy on {N}ew {E}ra of {A}ndroid {K}otlin},
    author = {Jahanvee Narang, Salony Tuli},
    journal = {International {J}ournal of {T}echnology and {C}omputing},
    volume = {3},
    issue = {8},
    month = {August},
    year = {2017},
    abstract = { In the New Era of Technology, Google declared a new-fangled popular language for android applications and Softwareâ€™s i.e. KOTLIN. KOTLIN is a programming language which includes the targets java standards. Kotlin is best fitted for android as it brings all the advantages of new era modern pros into it and that to be without limiting any of its techniques. Kotlin was written by company named JETBRAINS, which also developed in the android studio. As we have already discussed that the language is similar like java programming language. Kotlin name also came from an island named St. Peterberg named Kotlin Island. Software Company, Jetbrains found that the java has long congested program to work with which results in less production. Kotlin is designed in such a way that it can be interoperate with java code and vice-versa. This means that we can easily convert java code existing file into kotlin file. Kotlin includes functional programming which makes program more readable and includes null point exceptions}}
    
@article{reviewonandroidkotlindifferences,
    Title = {Review {S}tudy on {N}ew {E}ra of {A}ndroid {K}otlin},
    author = {Jahanvee Narang, Salony Tuli},
    journal = {International {J}ournal of {T}echnology and {C}omputing},
    volume = {3},
    issue = {8},
    month = {August},
    year = {2017},
    pages = {272 - 273},
    abstract = { In the New Era of Technology, Google declared a new-fangled popular language for android applications and Softwareâ€™s i.e. KOTLIN. KOTLIN is a programming language which includes the targets java standards. Kotlin is best fitted for android as it brings all the advantages of new era modern pros into it and that to be without limiting any of its techniques. Kotlin was written by company named JETBRAINS, which also developed in the android studio. As we have already discussed that the language is similar like java programming language. Kotlin name also came from an island named St. Peterberg named Kotlin Island. Software Company, Jetbrains found that the java has long congested program to work with which results in less production. Kotlin is designed in such a way that it can be interoperate with java code and vice-versa. This means that we can easily convert java code existing file into kotlin file. Kotlin includes functional programming which makes program more readable and includes null point exceptions}}
    
@online{ijtcref,
    Title = {International {J}ournal of {T}echnology and {C}omputing},
    url = {http://www.ijtc.org/}}
    
@online{cernwebbirth,
    Title = {The {B}irth of the {W}eb - {CERN}},
    url = {https://home.cern/science/computing/birth-web}}
    
@online{webinternetdifference,
    Title = {What's the {D}ifference {B}etween the {Web} and the {I}nternet},
    url = {https://www.geeksforgeeks.org/whats-difference-internet-web/}}
    
@online{kotlinlesscode,
    Title = {F{AQ} - {K}otlin {P}rogramming {L}anguage},
    url = {https://kotlinlang.org/docs/reference/faq.html}}
    
@book{cleanarchitecturebook,
    author = {Robert {M}artin},
    Title = {Clean {A}rchitecture: {A} {C}raftman's {G}uide to {S}oftware {S}tructure and {D}esign},
    publisher = {Prentice {H}all},
    year = {2016},
    month = {December}}
    
@online{cleanarchitecturemartindiagram,
    Title = {Clean {C}oder {B}log: {T}he {C}lean {A}rchitecture},
    url = {https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html}}
    
@online{teamworkcleanarchitecture,
    Title = {Clean {A}rchitecture on {A}ndroid: {T}he {T}eamwork.com {W}ay!},
    url = {https://github.com/Teamwork/android-clean-architecture/blob/master/README.md}}
    
@online{androiddi,
    Title = {Dependency injection in {A}ndroid},
    url = {https://developer.android.com/training/dependency-injection}}
    
@online{androidktx,
    Title = {Android {KTX}},
    url = {https://developer.android.com/kotlin/ktx.html}}
    
@online{androidjetpacknavigation,
    Title = {Android {J}etpack {N}avigation},
    url = {https://developer.android.com/guide/navigation/}}
    
@online{androidjetpackpaging,
    Title = {Android {J}etpack {P}aging},
    url = {https://developer.android.com/topic/libraries/architecture/paging/}}
    
@online{rxjava,
    Title = {Rx{J}ava},
    url = {https://github.com/ReactiveX/RxJava}}
    
@online{rxjavamarblediagram,
    Title = {Rx{J}ava {U}nderstanding {M}arble {D}iagrams},
    url = {https://medium.com/@jshvarts/read-marble-diagrams-like-a-pro-3d72934d3ef5}}
    
@online{retrofit,
    Title = {Retrofit},
    url = {https://square.github.io/retrofit/}}
    
@online{butterknife,
    Title = {Butter {K}nife},
    url = {https://jakewharton.github.io/butterknife/}}
    
@online{moshi,
    Title = {Moshi},
    url = {https://github.com/square/moshi/blob/master/README.md}}
    
@online{moshibettergson,
    Title = {Top 10 {A}ndroid {L}ibraries {E}very {A}ndroid {D}eveloper {S}hould {K}now},
    url = {https://infinum.com/the-capsized-eight/top-10-android-libraries-every-android-developer-should-know-about}}
    
@online{rubyonrails,
    Title = {Ruby on {R}ails},
    url = {https://rubyonrails.org/}}
    
@online{rubyonrailsapi,
    Title = {Ruby on {R}ails {API}},
    url = {https://guides.rubyonrails.org/api_app.html}}
    
@online{rubyonrailslogo,
    Title = {Ruby on {R}ails {L}ogo},
    url = {https://www.trzcacak.rs/imgb/hmJJRxT/}}
    
@online{rubycodestructure,
    Title = {Ruby on {R}ails {API}},
    url = {https://api.rubyonrails.org/}}
    
@online{rubydatabase,
    Title = {Ruby on {R}ails: {G}etting {S}tarted},
    url = {https://guides.rubyonrails.org/v2.3/getting_started.html#configuring-a-database}}
    
@online{firebaselogo,
    Title = {Firebase {L}ogo},
    url = {https://commons.wikimedia.org/wiki/File:Firebase_Logo.png}}
    
@online{60percentkotlinref,
    Title = {Android's commitment to {K}otlin},
    author = {David {W}iner},
    url = {https://android-developers.googleblog.com/2019/12/androids-commitment-to-kotlin.html}}
    
@online{appstorerating,
    Title = {10 {E}ffective {W}ays to {I}mprove {U}ser {R}atings},
    url = {https://thetool.io/2017/improve-user-ratings}}
    
@book{restapidesignrulebook,
    Title = {{REST API} {D}esign {R}ulebook},
    author = {Mark {M}asse},
    publisher = {O'Reilly Media},
    year = {2011},
    month = {October},
    edition = {1}}
    
@inbook{restapidesigntimebernersleereference,
    Title = {{REST API} {D}esign {R}ulebook},
    author = {Mark {M}asse},
    publisher = {O'Reilly Media},
    year = {2011},
    month = {October},
    edition = {1},
    pages = {1}}
    
@inbook{restapidesignwebusersreference,
    Title = {{REST API} {D}esign {R}ulebook},
    author = {Mark {M}asse},
    publisher = {O'Reilly Media},
    year = {2011},
    month = {October},
    edition = {1},
    pages = {2}}
    
@inbook{restapidesigwebstandardsreference,
    Title = {{REST API} {D}esign {R}ulebook},
    author = {Mark {M}asse},
    publisher = {O'Reilly Media},
    year = {2011},
    month = {October},
    edition = {1},
    pages = {3 - 4}}
    
@book{restfulapidesign,
    Title = {{REST}ful {API} {D}esign},
    author = {Matthias {B}iehl},
    publisher = {Create{S}pace {I}ndependent {P}ublishing {P}latform},
    year = {2016},
    month = {August},
    edition = {1},
    volume = {3}}
    
@inbook{restfulapidesignbenefits,
    Title = {{REST}ful {API} {D}esign},
    author = {Matthias {B}iehl},
    publisher = {Create{S}pace {I}ndependent {P}ublishing {P}latform},
    year = {2016},
    month = {August},
    edition = {1},
    volume = {3},
    pages = {19}}
    
@book{androidkotlindevbook,
    Title = {Mastering {A}ndroid {D}evelopment with {K}otlin: {D}eep dive into the world of {A}ndroid to create robust applications with {K}otlin},
    author = {Milos {V}asic},
    publisher = {Packt {P}ublishing},
    year = {2017},
    month = {November},
    edition = {1}}
    
@inbook{androidkotlindevbookkotlinfirst,
    Title = {Mastering {A}ndroid {D}evelopment with {K}otlin: {D}eep dive into the world of {A}ndroid to create robust applications with {K}otlin},
    author = {Milos {V}asic},
    publisher = {Packt {P}ublishing},
    year = {2017},
    month = {November},
    edition = {1},
    pages = {6}}
    
@inbook{androidkotlindevbookkotlinjavacompat,
    Title = {Mastering {A}ndroid {D}evelopment with {K}otlin: {D}eep dive into the world of {A}ndroid to create robust applications with {K}otlin},
    author = {Milos {V}asic},
    publisher = {Packt {P}ublishing},
    year = {2017},
    month = {November},
    edition = {1},
    pages = {7}}
    
@phdthesis{restphdthesis,
    Title = {Architectural Styles and the Design of Network-based Software Architectures},
    author = {Roy {F}ielding},
    abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of networkbased application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the  Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
    year = {2000},
    school = {University of California, Irvine}}
    
@phdthesis{restphdthesisscaleproblem,
    Title = {Architectural Styles and the Design of Network-based Software Architectures},
    author = {Roy {F}ielding},
    abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of networkbased application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the  Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
    year = {2000},
    school = {University of California, Irvine},
    page = {71}}
    
@phdthesis{restphdthesisrestoutline,
    Title = {Architectural Styles and the Design of Network-based Software Architectures},
    author = {Roy {F}ielding},
    abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of networkbased application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the  Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
    year = {2000},
    school = {University of California, Irvine},
    page = {78 - 84}}